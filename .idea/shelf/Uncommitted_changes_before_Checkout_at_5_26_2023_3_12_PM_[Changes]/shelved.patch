Index: src/main/java/service/CustomerService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package service;\r\n\r\nimport model.Address;\r\nimport model.House;\r\n\r\nimport java.sql.*;\r\nimport java.time.LocalDate;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class CustomerService {\r\n    private String jdbcURL = \"jdbc:mysql://localhost:3306/houserentingdb\";\r\n    private String jdbcUsername = \"root\";\r\n    private String jdbcPassword = \"C0223g1@\";\r\n\r\n\r\n    public CustomerService() {\r\n    }\r\n\r\n\r\n    private static final String SELECT_FIVE_HOUSE = \"select * from House join Review on House.house_id = Review.house_id order by rating desc limit 5\";\r\n\r\n    private static final String SELECT_HOUSE_ALL = \"select * from House \";\r\n    private static final String SELECT_HOUSE_BY_STATUS = \"select * from House where status = ? and unavailable_until = ? \";\r\n    private static final String SELECT_HOUSE_BY_TEST = \" SELECT house.house_id, house.price,house.view_date,house.unavailable_until, house.area, house.type, house.status,house.address_id,house.renter_id,house.owner_id,house.discription, address.province, address.district, address.ward FROM house JOIN address ON address.address_id = house.address_id WHERE address.province = ? \";\r\n    //    private static final String SELECT_HOUSE_BY_ID = \"select * from House where unavailable_until = ? \";\r\n//    private static final String SELECT_HOUSE_BY_DATE = \"select * from House where house_id = ? \";\r\n//\r\n//    private static final String SELECT_HOUSE_ADDRESS = \"select house_id ,price,unavailable_until,area,type,status, address.province , address.district , address.ward from house \\n\" +\r\n//            \"join address on address.address_id = house.address_id;\";\r\n\r\n\r\n\r\n    protected Connection getConnection() {\r\n        Connection connection = null;\r\n        try {\r\n            Class.forName(\"com.mysql.jdbc.Driver\");\r\n            connection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);\r\n        } catch (ClassNotFoundException | SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return connection;\r\n    }\r\n\r\n\r\n    public List<House> findAll() {\r\n        List<House> houseList = new ArrayList<>();\r\n        try (Connection connection = getConnection();\r\n             PreparedStatement preparedStatement = connection.prepareStatement(SELECT_HOUSE_ALL)) {\r\n            List<House> houses = new ArrayList<>();\r\n            System.out.println(preparedStatement);\r\n            ResultSet resultSet = preparedStatement.executeQuery();\r\n            while (resultSet.next()) {\r\n                int houseId = resultSet.getInt(\"house_id\");\r\n                double price = resultSet.getDouble(\"price\");\r\n                LocalDate viewDate = resultSet.getDate(\"view_date\").toLocalDate();\r\n                LocalDate unavailableUntil = resultSet.getDate(\"unavailable_until\").toLocalDate();\r\n                String area = resultSet.getString(\"area\");\r\n                String type = resultSet.getString(\"type\");\r\n                boolean status = resultSet.getBoolean(\"status\");\r\n                int addressId = resultSet.getInt(\"address_id\");\r\n                Address address1 = AddressManager.getAddressById(addressId);\r\n                int renterId = resultSet.getInt(\"renter_id\");\r\n                int owner = resultSet.getInt(\"owner_id\");\r\n                String discription = resultSet.getString(\"discription\");\r\n                houseList.add(new House(houseId, price, viewDate, unavailableUntil, area, type, status, address1, renterId, owner, discription));\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return houseList;\r\n    }\r\n\r\n    public List<House> findIndexAddress(String address) {\r\n        List<House> houseList = new ArrayList<>();\r\n        try (Connection connection = getConnection();\r\n\r\n             PreparedStatement preparedStatement = connection.prepareStatement(SELECT_HOUSE_BY_TEST)) {\r\n            preparedStatement.setString(1, address);\r\n            System.out.println(preparedStatement);\r\n            ResultSet resultSet = preparedStatement.executeQuery();\r\n\r\n            while (resultSet.next()) {\r\n                int houseId = resultSet.getInt(\"house_id\");\r\n                double price = resultSet.getDouble(\"price\");\r\n                LocalDate viewDate = resultSet.getDate(\"view_date\").toLocalDate();\r\n                LocalDate unavailableUntil = resultSet.getDate(\"unavailable_until\").toLocalDate();\r\n                String area = resultSet.getString(\"area\");\r\n                String type = resultSet.getString(\"type\");\r\n                Boolean status = resultSet.getBoolean(\"status\");\r\n                int addressId = resultSet.getInt(\"address_id\");\r\n                String addressIdStr = String.valueOf(addressId);\r\n                Address address1 = AddressManager.getAddressById(Integer.parseInt(addressIdStr));\r\n                int renterId = resultSet.getInt(\"renter_id\");\r\n                int owner = resultSet.getInt(\"owner_id\");\r\n                String discription = resultSet.getString(\"discription\");\r\n                houseList.add(new House(houseId, price, viewDate, unavailableUntil, area, type, status, address1, renterId, owner, discription));\r\n            }\r\n        } catch (SQLException e) {\r\n            printSQLException(e);\r\n        }\r\n        return houseList;\r\n    }\r\n\r\n\r\n    public List<House> findIndexID(int status1, LocalDate unavailable_until) {\r\n        List<House> houseList1 = new ArrayList<>();\r\n        try (Connection connection = getConnection();\r\n             PreparedStatement preparedStatement = connection.prepareStatement(SELECT_HOUSE_BY_STATUS)) {\r\n            preparedStatement.setInt(1, status1);\r\n            preparedStatement.setDate(2, Date.valueOf(unavailable_until));\r\n            System.out.println(preparedStatement);\r\n            ResultSet resultSet = preparedStatement.executeQuery();\r\n            while (resultSet.next()) {\r\n                int houseId = resultSet.getInt(\"house_id\");\r\n                double price = resultSet.getDouble(\"price\");\r\n                LocalDate viewDate = resultSet.getDate(\"view_date\").toLocalDate();\r\n                unavailable_until = resultSet.getDate(\"unavailable_until\").toLocalDate();\r\n                String area = resultSet.getString(\"area\");\r\n                String type = resultSet.getString(\"type\");\r\n                Boolean status = resultSet.getBoolean(\"status\");\r\n                int addressId = resultSet.getInt(\"address_id\");\r\n                String addressIdStr = String.valueOf(addressId);\r\n                Address address1 = AddressManager.getAddressById(Integer.parseInt(addressIdStr));\r\n                int renterId = resultSet.getInt(\"renter_id\");\r\n                int owner = resultSet.getInt(\"owner_id\");\r\n                String discription = resultSet.getString(\"discription\");\r\n                houseList1.add(new House(houseId, price, viewDate, unavailable_until, area, type, status, address1, renterId, owner, discription));\r\n            }\r\n        } catch (SQLException e) {\r\n            printSQLException(e);\r\n        }\r\n        return houseList1;\r\n    }\r\n\r\n    public List<House> findIndex(int address) {\r\n        List<House> houseList = new ArrayList<>();\r\n        try (Connection connection = getConnection();\r\n\r\n             PreparedStatement preparedStatement = connection.prepareStatement(SELECT_HOUSE_BY_STATUS)) {\r\n            preparedStatement.setInt(1, address);\r\n            System.out.println(preparedStatement);\r\n            ResultSet resultSet = preparedStatement.executeQuery();\r\n\r\n            while (resultSet.next()) {\r\n                int houseId = resultSet.getInt(\"house_id\");\r\n                double price = resultSet.getDouble(\"price\");\r\n                LocalDate viewDate = resultSet.getDate(\"view_date\").toLocalDate();\r\n                LocalDate unavailableUntil = resultSet.getDate(\"unavailable_until\").toLocalDate();\r\n                String area = resultSet.getString(\"area\");\r\n                String type = resultSet.getString(\"type\");\r\n                Boolean status = resultSet.getBoolean(\"status\");\r\n                int addressId = resultSet.getInt(\"address_id\");\r\n                String addressIdStr = String.valueOf(addressId);\r\n                Address address1 = AddressManager.getAddressById(Integer.parseInt(addressIdStr));\r\n                int renterId = resultSet.getInt(\"renter_id\");\r\n                int owner = resultSet.getInt(\"owner_id\");\r\n                String discription = resultSet.getString(\"discription\");\r\n                houseList.add(new House(houseId, price, viewDate, unavailableUntil, area, type, status, address1, renterId, owner, discription));\r\n            }\r\n        } catch (SQLException e) {\r\n            printSQLException(e);\r\n        }\r\n        return houseList;\r\n    }\r\n\r\n    public List<House> selectAllUsers() {\r\n\r\n        // using try-with-resources to avoid closing resources (boiler plate code)\r\n        List<House> houses = new ArrayList<>();\r\n        // Step 1: Establishing a Connection\r\n        try (Connection connection = getConnection();\r\n\r\n             // Step 2:Create a statement using connection object\r\n             PreparedStatement preparedStatement = connection.prepareStatement(SELECT_FIVE_HOUSE);) {\r\n            System.out.println(preparedStatement);\r\n            // Step 3: Execute the query or update query\r\n            ResultSet rs = preparedStatement.executeQuery();\r\n\r\n            // Step 4: Process the ResultSet object.\r\n            while (rs.next()) {\r\n                int houseId = rs.getInt(\"houseId\");\r\n                Double price = rs.getDouble(\"price\");\r\n                LocalDate viewDate = rs.getDate(\"viewDate\").toLocalDate();\r\n                LocalDate unavailableUntil = rs.getDate(\"unavailableUntil\").toLocalDate();\r\n                String area = rs.getString(\"area\");\r\n                String type = rs.getString(\"type\");\r\n                Boolean status = rs.getBoolean(\"status\");\r\n                int addressId = rs.getInt(\"address_id\");\r\n                Address address = AddressManager.getAddressById(addressId);\r\n                int renterId = rs.getInt(\"renterId\");\r\n                int ownerId = rs.getInt(\"ownerId\");\r\n                String description = rs.getString(\"description\");\r\n                houses.add(new House(houseId, price, viewDate, unavailableUntil, area, type, status, address, renterId, ownerId, description));\r\n            }\r\n        } catch (SQLException e) {\r\n            printSQLException(e);\r\n        }\r\n        return houses;\r\n    }\r\n\r\n    private void printSQLException(SQLException ex) {\r\n        for (Throwable e : ex) {\r\n            if (e instanceof SQLException) {\r\n                e.printStackTrace(System.err);\r\n                System.err.println(\"SQLState: \" + ((SQLException) e).getSQLState());\r\n                System.err.println(\"Error Code: \" + ((SQLException) e).getErrorCode());\r\n                System.err.println(\"Message: \" + e.getMessage());\r\n                Throwable t = ex.getCause();\r\n                while (t != null) {\r\n                    System.out.println(\"Cause: \" + t);\r\n                    t = t.getCause();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/service/CustomerService.java b/src/main/java/service/CustomerService.java
--- a/src/main/java/service/CustomerService.java	
+++ b/src/main/java/service/CustomerService.java	
@@ -21,6 +21,7 @@
     private static final String SELECT_FIVE_HOUSE = "select * from House join Review on House.house_id = Review.house_id order by rating desc limit 5";
 
     private static final String SELECT_HOUSE_ALL = "select * from House ";
+    private static final String SELECT_HOUSE_BY_VIEW = "select * from House where house_id = ? ";
     private static final String SELECT_HOUSE_BY_STATUS = "select * from House where status = ? and unavailable_until = ? ";
     private static final String SELECT_HOUSE_BY_TEST = " SELECT house.house_id, house.price,house.view_date,house.unavailable_until, house.area, house.type, house.status,house.address_id,house.renter_id,house.owner_id,house.discription, address.province, address.district, address.ward FROM house JOIN address ON address.address_id = house.address_id WHERE address.province = ? ";
     //    private static final String SELECT_HOUSE_BY_ID = "select * from House where unavailable_until = ? ";
@@ -133,12 +134,12 @@
         return houseList1;
     }
 
-    public List<House> findIndex(int address) {
-        List<House> houseList = new ArrayList<>();
+    public House findIndex(int house) {
+        House house1 = null;
         try (Connection connection = getConnection();
 
-             PreparedStatement preparedStatement = connection.prepareStatement(SELECT_HOUSE_BY_STATUS)) {
-            preparedStatement.setInt(1, address);
+             PreparedStatement preparedStatement = connection.prepareStatement(SELECT_HOUSE_BY_VIEW)) {
+            preparedStatement.setInt(1, house);
             System.out.println(preparedStatement);
             ResultSet resultSet = preparedStatement.executeQuery();
 
@@ -156,12 +157,12 @@
                 int renterId = resultSet.getInt("renter_id");
                 int owner = resultSet.getInt("owner_id");
                 String discription = resultSet.getString("discription");
-                houseList.add(new House(houseId, price, viewDate, unavailableUntil, area, type, status, address1, renterId, owner, discription));
+                house1 = new House(houseId, price, viewDate, unavailableUntil, area, type, status, address1, renterId, owner, discription);
             }
         } catch (SQLException e) {
             printSQLException(e);
         }
-        return houseList;
+        return house1;
     }
 
     public List<House> selectAllUsers() {
Index: .idea/dataSources.local.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"dataSourceStorageLocal\" created-in=\"IU-223.8836.41\">\r\n    <data-source name=\"@localhost\" uuid=\"b30348aa-0bbf-43e0-8eaa-b5ef19a7c3f3\">\r\n      <database-info product=\"MySQL\" version=\"8.0.33\" jdbc-version=\"4.2\" driver-name=\"MySQL Connector/J\" driver-version=\"mysql-connector-java-8.0.25 (Revision: 08be9e9b4cba6aa115f9b27b215887af40b159e0)\" dbms=\"MYSQL\" exact-version=\"8.0.33\" exact-driver-version=\"8.0\">\r\n        <extra-name-characters>#@</extra-name-characters>\r\n        <identifier-quote-string>`</identifier-quote-string>\r\n      </database-info>\r\n      <case-sensitivity plain-identifiers=\"lower\" quoted-identifiers=\"lower\" />\r\n      <secret-storage>master_key</secret-storage>\r\n      <user-name>root</user-name>\r\n      <schema-mapping>\r\n        <introspection-scope>\r\n          <node kind=\"schema\">\r\n            <name qname=\"@\" />\r\n            <name qname=\"houserentingdb\" />\r\n          </node>\r\n        </introspection-scope>\r\n      </schema-mapping>\r\n    </data-source>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dataSources.local.xml b/.idea/dataSources.local.xml
--- a/.idea/dataSources.local.xml	
+++ b/.idea/dataSources.local.xml	
@@ -2,21 +2,8 @@
 <project version="4">
   <component name="dataSourceStorageLocal" created-in="IU-223.8836.41">
     <data-source name="@localhost" uuid="b30348aa-0bbf-43e0-8eaa-b5ef19a7c3f3">
-      <database-info product="MySQL" version="8.0.33" jdbc-version="4.2" driver-name="MySQL Connector/J" driver-version="mysql-connector-java-8.0.25 (Revision: 08be9e9b4cba6aa115f9b27b215887af40b159e0)" dbms="MYSQL" exact-version="8.0.33" exact-driver-version="8.0">
-        <extra-name-characters>#@</extra-name-characters>
-        <identifier-quote-string>`</identifier-quote-string>
-      </database-info>
-      <case-sensitivity plain-identifiers="lower" quoted-identifiers="lower" />
-      <secret-storage>master_key</secret-storage>
-      <user-name>root</user-name>
-      <schema-mapping>
-        <introspection-scope>
-          <node kind="schema">
-            <name qname="@" />
-            <name qname="houserentingdb" />
-          </node>
-        </introspection-scope>
-      </schema-mapping>
+      <database-info product="" version="" jdbc-version="" driver-name="" driver-version="" dbms="MYSQL" exact-version="0" />
+      <schema-mapping />
     </data-source>
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/controller/OwenrServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport model.House;\r\nimport service.CustomerService;\r\n\r\nimport javax.servlet.*;\r\nimport javax.servlet.http.*;\r\nimport javax.servlet.annotation.*;\r\nimport java.io.IOException;\r\n\r\nimport java.sql.SQLException;\r\nimport java.time.LocalDate;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@WebServlet(name = \"OwenrServlet\", value = \"/Owenr\")\r\n\r\npublic class OwenrServlet extends HttpServlet {\r\n\r\n    private static final long serialVersionUID = 1L;\r\n    private CustomerService customerList;\r\n\r\n    public void init() {\r\n        customerList = new CustomerService();\r\n    }\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String action = request.getParameter(\"action\");\r\n        if (action == null) {\r\n            action = \"\";\r\n        }\r\n        try {\r\n            switch (action) {\r\n                case \"search\":\r\n                    searchFromHouse(request, response);\r\n                    break;\r\n                case \"view\":\r\n                    viewCustomer(request,response);\r\n                case \"searchDate\":\r\n                    searchFromDate(request,response);\r\n                    break;\r\n                default:\r\n                    listCustomer(request, response);\r\n                    break;\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String action = request.getParameter(\"action\");\r\n        if (action == null) {\r\n            action = \"\";\r\n        }\r\n        try {\r\n            switch (action) {\r\n                case \"search\":\r\n                    break;\r\n                case \"view\":\r\n                    viewCustomer(request,response);\r\n                    break;\r\n                case \"searchDate\":\r\n                    searchFromDate(request,response);\r\n                    break;\r\n                default:\r\n                    listCustomer(request, response);\r\n                    break;\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void searchFromHouse(HttpServletRequest request, HttpServletResponse response)\r\n            throws SQLException, IOException, ServletException {\r\n        String address = request.getParameter(\"form-control\");\r\n        List<House> house = customerList.findIndexAddress(address);\r\n        RequestDispatcher dispatcher;\r\n        if (house.isEmpty()) {\r\n            dispatcher = request.getRequestDispatcher(\"error.jsp\");\r\n        } else {\r\n            request.setAttribute(\"house\", house);\r\n            dispatcher = request.getRequestDispatcher(\"house.jsp\");\r\n        }\r\n\r\n        try {\r\n            dispatcher.forward(request, response);\r\n        } catch (ServletException | IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    private void searchFromDate(HttpServletRequest request, HttpServletResponse response)\r\n            throws SQLException, IOException, ServletException {\r\n        String date = request.getParameter(\"dateSearch\");\r\n        String stt = request.getParameter(\"dateSearch1\");\r\n\r\n        List<House> house = null;\r\n        if(date.equals(\"\") && stt.equals(\"\")){\r\n            house = new ArrayList<>();\r\n        }else {\r\n            LocalDate  searchDate = LocalDate.parse(request.getParameter(\"dateSearch\"));\r\n            int status = Integer.parseInt(request.getParameter(\"dateSearch1\"));\r\n            house = customerList.findIndexID(status,searchDate);\r\n        }\r\n        RequestDispatcher dispatcher;\r\n        if (house.isEmpty()) {\r\n            dispatcher = request.getRequestDispatcher(\"house.jsp\");\r\n        } else {\r\n            request.setAttribute(\"house\", house);\r\n            dispatcher = request.getRequestDispatcher(\"house.jsp\");\r\n        }\r\n\r\n        try {\r\n            dispatcher.forward(request, response);\r\n        } catch (ServletException | IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    private void listCustomer(HttpServletRequest request, HttpServletResponse response)\r\n            throws SQLException, IOException, ServletException {\r\n        List<House> house = customerList.findAll();\r\n        request.setAttribute(\"house\", house);\r\n        RequestDispatcher dispatcher = request.getRequestDispatcher(\"index.jsp\");\r\n        dispatcher.forward(request, response);\r\n    }\r\n\r\n\r\n\r\n    private void viewCustomer(HttpServletRequest request, HttpServletResponse response) {\r\n        int house_id = Integer.parseInt(request.getParameter(\"form-control\"));\r\n        List<House> house = customerList.findIndex(house_id);\r\n        RequestDispatcher dispatcher;\r\n        if (house == null) {\r\n            dispatcher = request.getRequestDispatcher(\"error.jsp\");\r\n        } else {\r\n            request.setAttribute(\"house\", house);\r\n            dispatcher = request.getRequestDispatcher(\"about.jsp\");\r\n        }\r\n\r\n        try {\r\n            dispatcher.forward(request, response);\r\n        } catch (ServletException | IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/src/main/java/controller/OwenrServlet.java b/src/main/java/controller/OwenrServlet.java
--- a/src/main/java/controller/OwenrServlet.java	
+++ b/src/main/java/controller/OwenrServlet.java	
@@ -135,22 +135,14 @@
 
 
 
-    private void viewCustomer(HttpServletRequest request, HttpServletResponse response) {
-        int house_id = Integer.parseInt(request.getParameter("form-control"));
-        List<House> house = customerList.findIndex(house_id);
+    private void viewCustomer(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        int house_id = Integer.parseInt(request.getParameter("house_id"));
+        House house = customerList.findIndex(house_id);
         RequestDispatcher dispatcher;
-        if (house == null) {
-            dispatcher = request.getRequestDispatcher("error.jsp");
-        } else {
-            request.setAttribute("house", house);
-            dispatcher = request.getRequestDispatcher("about.jsp");
-        }
-
-        try {
-            dispatcher.forward(request, response);
-        } catch (ServletException | IOException e) {
-            e.printStackTrace();
-        }
+        request.setAttribute("house", house);
+        dispatcher = request.getRequestDispatcher("about.jsp");
+        dispatcher.forward(request, response);
+//        response.sendRedirect("about.jsp");
     }
 
 }
